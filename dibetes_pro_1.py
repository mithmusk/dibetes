# -*- coding: utf-8 -*-
"""dibetes pro-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E26CE9bwZjzgNeDWx5yE2vlI_jK03j35
"""

#importing the dependencies
import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

"""datacollection analysis

PIMA diabetes  dataset
"""

#data to dataframe
diabetes_data = pd.read_csv('/content/diabetes.csv')

diabetes_data.head()

diabetes_data.shape

# getting the satatistical measures of the data
 diabetes_data.describe()

diabetes_data['Outcome'].value_counts()

"""0 --> nonn diabetic 



1--> diabetic 
"""

diabetes_data.groupby('Outcome').mean()

#separating the data and labels
X = diabetes_data.drop(columns= 'Outcome', axis = 1)
Y = diabetes_data['Outcome']
print(X)

print(Y)

"""data standardisation """

scaler = StandardScaler()

scaler.fit(X)

standardized_data = scaler.transform(X)

print(standardized_data)

X = standardized_data
Y = diabetes_data['Outcome']

print(X)

print(Y)

# train and split
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size= 0.2, stratify= Y, random_state= 2)

print(X)

print(Y)

print(X.shape, X_train.shape, X_test.shape)

"""training the model

"""

classifier = svm.SVC(kernel= 'linear')

#training the support vector classifier

classifier.fit(X_train, Y_train)

"""model evaluation """

#accuracy score on the training data
X_train_prediction = classifier.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction , Y_train)
print('accuracy score of the traing data : ', training_data_accuracy)

#accuracy score on the test data
X_test_prediction = classifier.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction , Y_test)
print('accuracy score of the traing data : ', test_data_accuracy)

"""Making a preditive system"""

input_data = (5,137,108,0,0,48.8,0.227,37)
# changing input data to numoy array
input_data_as_array = np.asarray(input_data)

#reshapeing the data or array as we are predicting for one instance
input_data_reshaped = input_data_as_array.reshape(1, -1)



prediction = classifier.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == '0'): # [] is list the predictor gives a list thats why the first values [0] we have to count it or define it
  print('Person is not diabetic')
else:
  print('Person has diabetes')

"""Saving the trained model

"""

import pickle

filename = 'trained_model.sav'
pickle.dump(classifier, open(filename, 'wb'))

#loading the saved model
loaded_model = pickle.load(open('trained_model.sav', 'rb'))

input_data = (5,137,108,0,0,48.8,0.227,37)
# changing input data to numoy array
input_data_as_array = np.asarray(input_data)

#reshapeing the data or array as we are predicting for one instance
input_data_reshaped = input_data_as_array.reshape(1, -1)



prediction = loaded_model.predict(input_data_reshaped)
print(prediction)

if (prediction[0] == '0'): # [] is list the predictor gives a list thats why the first values [0] we have to count it or define it
  print('Person is not diabetic')
else:
  print('Person has diabetes')

